#!/usr/bin/env python3

import argparse
import sys
# From circlator v0.14.2 by Martin Hunt
sys.path.append('../')
sys.path.append('./')

tasks = {
    'samplekmers': 'Create a KMC database for each sample in a spreadsheet',
    'checkspreadsheet': 'Checks the input spreadsheet is valid',
    'checkdependancies': 'Checks the correct versions of dependancies are installed',
    'version': 'Print version and exit',
}


ordered_tasks = [
    'samplekmers',
    'checkspreadsheet',
    'checkdependancies',
    'version'
]


def print_usage_and_exit():
    print('Usage: trait_assembler <command> [options] <required arguments>', file=sys.stderr)
    print('\nTo get minimal usage for a command use:\ntrait_assembler command', file=sys.stderr)
    print('\nTo get full help for a command use one of:\ntrait_assembler command -h\ntrait_assembler command --help\n', file=sys.stderr)
    print('\nAvailable commands:\n', file=sys.stderr)
    max_task_length = max([len(x) for x in list(tasks.keys())]) + 1
    for task in ordered_tasks:
        print('{{0: <{}}}'.format(max_task_length).format(task), tasks[task], sep=' ', file=sys.stderr)
    sys.exit(0)

if len(sys.argv) == 1 or sys.argv[1] in ['-h', '-help', '--help']:
    print_usage_and_exit()

task = sys.argv.pop(1)

if task not in tasks:
    print('Task "' + task + '" not recognised. Cannot continue.\n', file=sys.stderr)
    print_usage_and_exit()

exec('import trait_assembler.tasks.' + task)
exec('trait_assembler.tasks.' + task + '.run()')
